# Root logger option

# 1. 로그 출력 Level은 INFO부터 할것임.
# 2. rootLogger 에 사용할 로깅 Appender로 stdout이라는것과 
#    logfile이라는 것 두가지를 사용하겠다
#log4j.rootLogger=debug, stdout, logfile
log4j.rootLogger=debug, stdout
	#전체적인 레벨 설정. info레벨 이상을 출력하겠다,
	# stdout은 변수이름 같은 것. 

# Direct log messages to stdout
# ConversionPattern은 로그가 어떠한 형식으로 출력될것인지 
# 그 포맷을 정의하는 것.
	#ConsoleAppender -- 화면에 출력하는 appnder이다
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
	# System.out이라는 객체를 이용해서 출력한다. --> ConsoleAppender인 이유...
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p (%C{2}:%L) - %m%n
	# %5p : (자릿수, %P라는 형식을 5자로 출력하겠다. p는 debug, info, warn, error, fatal 등의 레벨(priority) 출력, 레벨이 제일 긴 글자가 5자라 5로 설정
	# (%C{2}:%L) : C는 클래스인데, /  %C{2}는 .으로 구분된 클래스 명의 뒤에서부터 두 단계만 출력하겠다는 뜻. / :%L 이건 출 번호 
	# -  : 이건 ' -' 문자 출력하고
	# %m%n : %m은 메세지 출력하라는 뜻, %n은 줄바꿈.
	)
# Direct log message to log file
# logfile이라는 appender는 로그를 파일로 출력해주는 놈인데, 
# 파일path를 정의 할 수 있다.
	# logfile을 DailyRollingFileAppender==날짜별로 만들겠다.  
log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.logfile.DatePattern='.'yyyy-MM-dd
log4j.appender.logfile.File=D:/application.log
	# 로그기록을 남겨주는 파일의 루트와 이름
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %5p (%C{2} - %M:%L) - %m%n
	# 패턴지정. 위의 패턴 설명과 동일. 파일에 출력하는 패턴
	# %d{yyyy-MM-dd HH:mm:ss}] : 날짜를 연도, 월 일 시 분 초로 출력해라
	# %M:%L : %M은 메서드 명을 출력해라. 
	# 위와 동일한 부분은 따로 기술하지 않았음..
log4j.appender.logfile.Append=true
	# Append가 true면 파일에 계속 데이터가 추가되는 식으로 하겠다.

# Sql log
# 이곳이 java.sql.* 을 사용하는 쿼리를 보여주는 설정.
#log4j.logger.java.sql.Connection=DEBUG, logfile
#log4j.logger.java.sql.Statement=DEBUG, logfile
#log4j.logger.java.sql.PreparedStatement=DEBUG, logfile
#log4j.logger.java.sql.ResultSet=DEBUG, logfile
